import numpy as np

def replacemat(triangle_list, orig, repl):
    for tri in triangle_list:
        if tri.matName == orig:
            tri.matName = repl

def buildVert(dataline: str):
    tokens = dataline.split()
    return VertexData(int(tokens[0]),
                     np.array([float(tokens[1]), float(tokens[2]), float(tokens[3])]),
                     np.array([float(tokens[4]), float(tokens[5]), float(tokens[6])]),
                     np.array([float(tokens[7]), float(tokens[8])]))

def buildTriangle(data: list):
    return TriangleData([buildVert(data[1]), buildVert(data[2]), buildVert(data[3])],
                 data[0].strip('\n'))

class VertexData:
    def __init__(self, nodeID, pos: np.array, norm: np.array, texCoord: np.array):
        self.boneID = nodeID
        self.pos = pos
        self.norm = norm
        self.texCoord = texCoord

    def smdString(self):
        def fstr(d):
            return '{:.9f}'.format(d)
        return (str(self.boneID)+' '+fstr(self.pos[0])+' '+fstr(self.pos[1])+' '+fstr(self.pos[2])+' '
                + fstr(self.norm[0]) + ' '+fstr(self.norm[1])+' '+fstr(self.norm[2])+' '
                + fstr(self.texCoord[0]) + ' '+fstr(self.texCoord[1]))

    def translate(self, vec:np.array):
        return VertexData(self.boneID, self.pos+vec, self.norm, self.texCoord)

    def apply_transformation(self, rot_mat, translation):
        return VertexData(self.boneID, np.dot(self.pos, rot_mat) + translation, np.dot(self.norm, rot_mat), self.texCoord)


class TriangleData:
    def __init__(self,  vertList: list, matName: str = 'undefined'):
        self.matName = matName
        self.verts = vertList

    def translate(self, vec: np.array):
        for vert in self.verts:
            vert.pos += vec

    def __add__(self, vec: np.array):
        return TriangleData([c.translate(vec) for c in self.verts], self.matName)

    def smdString(self):
        r_str = self.matName
        for x in self.verts:
            r_str += '\n'+x.smdString()
        return r_str

    def apply_transformation(self, rot_mat, translation):
        return TriangleData([c.apply_transformation(rot_mat, translation) for c in self.verts], self.matName)

class TimeFrame:
    def __init__(self, data: list):
        self.index = int(data[0].split()[1])
        self.datastr = data[1].strip('\n')

    def smdString(self):
        return 'time '+str(self.index)+'\n'+self.datastr


class SMD:
    def __init__(self, filename: str = None):
        self.nodes = list()
        self.sequence = list()
        self.triangles = list()
        if filename is not None:
            file = open(filename, 'r')
            f_data = file.readlines()
            index = 0

            def seek(regex:str, index):
                while regex not in f_data[index]:
                    index += 1
                return index

            index = seek("nodes", index)
            index += 1
            while "end" not in f_data[index]:
                self.nodes.append(f_data[index].strip('\n'))
                index += 1

            """index = seek("skeleton", index)
            index += 1
            while "end" not in f_data[index]:
                self.sequence.append(TimeFrame(f_data[index:index+2]))
                index += 2"""

            index = seek("triangles", index)
            index += 1
            while "end" not in f_data[index]:
                self.triangles.append(buildTriangle(f_data[index:index+4]))
                index += 4
        self.matset = set()
        for tri in self.triangles:
            self.matset.add(tri.matName)

    def replace_mat(self, orig, repl):
        replacemat(self.triangles, orig, repl)

    def getsmdstring(self):
        r_str = ('//SMD Generated by Tile Script'
                '\n//Author: SMD Generator'
                '\nversion 1.0')
        r_str += '\nnodes'
        for x in self.nodes:
            r_str += '\n'+ x
        r_str += '\nend'
        r_str += '\nskeleton'
        for x in self.sequence:
            r_str += '\n'+x.smdString()
        r_str += '\nend'
        r_str += '\ntriangles'
        for x in self.triangles:
            r_str += '\n'+x.smdString()
        r_str += '\nend'
        return r_str

    def write_to_file(self, filepath):
        r_str = self.getsmdstring()
        f = open(filepath+'.smd', 'w')
        f.write(r_str)
        f.close()

#d = SMD('facade2_mesh.smd')
#d.write_to_file('newmd')
#print(len(d.triangles))
#print("T")

